# FROM node:20.10.0-alpine AS base
# # Install dependencies only when needed
# # FROM base AS deps
# FROM base AS builder

# # Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
# # RUN apk add --no-cache libc6-compat

# WORKDIR /app

# # Install dependencies based on the preferred package manager
# COPY package.json package-lock.json* ./
# RUN npm ci

# # Rebuild the source code only when needed
# FROM base AS builder
# WORKDIR /app
# COPY --from=deps /app/node_modules ./node_modules
# COPY . .

# # Next.js collects completely anonymous telemetry data about general usage.
# # Learn more here: https://nextjs.org/telemetry
# # Uncomment the following line in case you want to disable telemetry during the build.
# # ENV NEXT_TELEMETRY_DISABLED 1
# RUN npm run build
# # If using npm comment out above and use below instead
# # RUN npm run build
# # Production image, copy all the files and run next
# FROM base AS runner
# WORKDIR /app
# ENV NODE_ENV production
# # Uncomment the following line in case you want to disable telemetry during runtime.
# # ENV NEXT_TELEMETRY_DISABLED 1
# RUN addgroup --system --gid 1001 nodejs
# RUN adduser --system --uid 1001 nextjs
# # COPY --from=builder /app/public ./public
# # Set the correct permission for prerender cache
# # RUN mkdir .next
# # RUN chown nextjs:nodejs .next
# # Automatically leverage output traces to reduce image size
# # https://nextjs.org/docs/advanced-features/output-file-tracing
# COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
# COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
# USER nextjs
# EXPOSE 3000
# ENV PORT 3000
# # set hostname to localhost
# ENV HOSTNAME "0.0.0.0"
# # server.js is created by next build from the standalone output
# # https://nextjs.org/docs/pages/api-reference/next-config-js/output
# CMD ["node", "server.js"]

# Use the official Node.js 14 image as the base image
FROM node:20.10.0-alpine as development
# RUN npm install -g pm2
# Set the working directory to /app
WORKDIR /app

RUN apk add --no-cache build-base python3


# Copy the package.json and package-lock.json files to the container
COPY package*.json ./

# RUN npm install -g npm@latest

RUN npm cache clean --force

# Install the dependencies
RUN npm install --legacy-peer-deps
# Copy the rest of the application code to the container
COPY . .
# Build the Next.js application
RUN npx prisma generate
RUN npm run build
# Expose port 8080
EXPOSE 3030
ENV PORT 3030
# Start the application
CMD ["npm", "run", "start"]
# CMD ["pm2", "start", "ecosystem.config.js"]

